<?xml version="1.0" encoding="UTF-8" ?>
<xliff srcLang="cs-CZ" xmlns:mtc="urn:oasis:names:tc:xliff:matches:2.0" version="2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" trgLang="en-US" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file original="C:\from_backup\multipage_books\cz\maclan_reference\transformation\maclan\area328.xml" id="1">
    <skeleton href="C:\from_backup\multipage_books\cz\maclan_reference\transformation\maclan\area328.xml.skl"/>
    <mda:metadata>
      <mda:metaGroup category="format">
        <mda:meta type="datatype">xml</mda:meta>
      </mda:metaGroup>
      <mda:metaGroup category="tool">
        <mda:meta type="tool-id">OpenXLIFF</mda:meta>
        <mda:meta type="tool-name">OpenXLIFF Filters</mda:meta>
        <mda:meta type="tool-version">3.0.0 20230109_0743</mda:meta>
      </mda:metaGroup>
      <mda:metaGroup category="PI">
        <mda:meta type="encoding">UTF-8</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <unit id="1">
      <segment id="1-0">
        <source xml:space="preserve"> [@PROCEDURE] ...</source>
      </segment>
      <segment id="1-1">
        <source xml:space="preserve"> [/@PROCEDURE] </source>
      </segment>
    </unit>
    <unit id="2">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
        <data id="ph1">&amp;amp;nbsp;</data>
        <data id="ph2">&amp;amp;nbsp;</data>
        <data id="ph3">&amp;amp;nbsp;</data>
        <data id="ph4">&amp;amp;nbsp;</data>
        <data id="ph5">&amp;amp;nbsp;</data>
        <data id="ph6">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="2-0">
        <source xml:space="preserve"> Tato značka definuje proceduru, která umožňuje vícenásobné použítí textu uvnitř značky a zároveň umožňuje tento text modifikovat pomocí parametrů.</source>
      </segment>
      <segment id="2-1">
        <source xml:space="preserve"> Každá procedura má svůj název, který se nastavuje pomocí parametru name nebo $name.</source>
      </segment>
      <segment id="2-2">
        <source xml:space="preserve"> Vnitřní text značky, který tvoří tělo procedury, spolu se vstupními a výstupními parametry, je uložen do paměti a může být následně vložen do textu pomocí volání [@CALL name=#MojeProcedura ...parametry...] nebo zkráceně [@MojeProcedura ...parametry...], kde MojeProcedura je název procedury.</source>
      </segment>
      <segment id="2-3">
        <source xml:space="preserve"> Platnost procedury se předpokládá v aktuálním bloku programu a jeho podblocích, a to v částech stránky následujících po její definici.</source>
      </segment>
      <segment id="2-4">
        <source xml:space="preserve"> Procedury mohou být rekurzivní, tzn. že mohou volat samy sebe uvnitř těla pomocí příkazu [@CALL ...] nebo [@MojeProcedura ...].</source>
      </segment>
      <segment id="2-5">
        <source xml:space="preserve"> Na místo definice procedury se v textu na stránce vloží vždy prázdný řetězec.</source>
      </segment>
      <segment id="2-6">
        <source xml:space="preserve"> Například následující program:</source>
      </segment>
      <segment id="2-7">
        <source xml:space="preserve"> [@PROCEDURE $name=#Print, firstName, name] Jméno:</source>
      </segment>
      <segment id="2-8">
        <source xml:space="preserve"> [@GET firstName], Příjmení:</source>
      </segment>
      <segment id="2-9">
        <source xml:space="preserve"> [@GET name] [/@PROCEDURE] <ph id="ph0"/> [@Print firstName=#Jan, name=#Novák] - vypíše na stránku text:</source>
      </segment>
      <segment id="2-10">
        <source xml:space="preserve"> Jméno:</source>
      </segment>
      <segment id="2-11">
        <source xml:space="preserve"> Jan, Příjmení:</source>
      </segment>
      <segment id="2-12">
        <source xml:space="preserve"> Novák Procedura může být také volána ve výrazu pomocí příkazu MojeProcedura(parametr1:hodnota1, ..., parametrN:hodnotaN).</source>
      </segment>
      <segment id="2-13">
        <source xml:space="preserve"> Parametry jsou pojmenované a jsou vždy ve tvaru parametr:hodnota, kde parametr udává název parametru a hodnota udává hodnotu parametru nebo výraz.</source>
      </segment>
      <segment id="2-14">
        <source xml:space="preserve"> Například:</source>
      </segment>
      <segment id="2-15">
        <source xml:space="preserve"> [@VAR myGlobaTimeVariable] <ph id="ph1"/> [@PROCEDURE name=#SetTime, value] [@SET myGlobaTimeVariable=value] [/@PROCEDURE] <ph id="ph2"/> [@SET unknown=setTime(value:'12:35')] [@GET myGlobaTimeVariable] - vloží do stránky text:</source>
      </segment>
      <segment id="2-16">
        <source xml:space="preserve"> 12:35 Parametry procedury nesmí mít názvy $name nebo $useLast nebo $global nebo $areaId, $areaAlias, $area, $startArea, $homeArea, $requestedArea a $thisArea.</source>
      </segment>
      <segment id="2-17">
        <source xml:space="preserve"> Parametry se uvádějí buď bez hodnoty, jako v předchozích příkladech, nebo s hodnotou out, ret nebo txt.</source>
      </segment>
      <segment id="2-18">
        <source xml:space="preserve"> Uvede-li se u parametru hodnota out, znamená to, že parametr při volání [@CALL] nebo [@MojeProcedura] očekává název proměnné jejíž hodnota bude nastavena při ukončení procedury (slouží pro výstup dat z procedury).</source>
      </segment>
      <segment id="2-19">
        <source xml:space="preserve"> Například následující program:</source>
      </segment>
      <segment id="2-20">
        <source xml:space="preserve"> [@PROCEDURE $name=#GetPi, output=out] [@SET output=math.PI] [/@PROCEDURE] <ph id="ph3"/> [@VAR pi] [@GetPi output=pi] [@GET pi] - vypíše na stránku hodnotu pí vrácenou procedurou GetPi, tj.:</source>
      </segment>
      <segment id="2-21">
        <source xml:space="preserve"> 3.141592653589793 Uvede-li se u parametru hodnota ret, pak slouží tento parametr k nastavení návratové hodnoty procedury pomocí příkazu [@SET].</source>
      </segment>
      <segment id="2-22">
        <source xml:space="preserve"> Návratovou hodnotu vrací procedura v případě, že je použita ve výrazu.</source>
      </segment>
      <segment id="2-23">
        <source xml:space="preserve"> Parametr s hodnotou ret může být uveden maximálně jednou.</source>
      </segment>
      <segment id="2-24">
        <source xml:space="preserve"> Například následující program:</source>
      </segment>
      <segment id="2-25">
        <source xml:space="preserve"> [@PROCEDURE $name=#GetEuler, returned=ret] [@SET returned=math.E] [/@PROCEDURE] <ph id="ph4"/> [@GET exp=GetEuler()] - vypíše na stránku hodnotou Eulerova čísla, kterou vrací ve výrazu procedura GetEuler, tj.:</source>
      </segment>
      <segment id="2-26">
        <source xml:space="preserve"> 2.718281828459045 Uvede-li se u parametru hodnota txt, pak při volání procedury ve výrazu uvádí tento parametr název proměnné, do které bude po ukončení procedury vložen výsledný zpracovaný text těla procedury.</source>
      </segment>
      <segment id="2-27">
        <source xml:space="preserve"> Například následující program:</source>
      </segment>
      <segment id="2-28">
        <source xml:space="preserve"> [@VAR myText] [@PROCEDURE name=#GetMessage, innerText=txt] Vítejte na stránkách [/@PROCEDURE] <ph id="ph5"/> [@SET unknown=GetMessage(innerText:myText)] [@GET myText] - vypíše na stránku pomocí příkazu [@GET] text:</source>
      </segment>
      <segment id="2-29">
        <source xml:space="preserve"> Vítejte na stránkách Je-li při volání procedury ve výrazu uvedeno více parametrů, pak nezáleží, díky jejich pojmenování, na jejich pořadí.</source>
      </segment>
      <segment id="2-30">
        <source xml:space="preserve"> Například následující program:</source>
      </segment>
      <segment id="2-31">
        <source xml:space="preserve"> [@PROCEDURE $name=#PrintAddress, $returnText, state, city, street] Stát:</source>
      </segment>
      <segment id="2-32">
        <source xml:space="preserve"> [@GET state], Město:</source>
      </segment>
      <segment id="2-33">
        <source xml:space="preserve"> [@GET city], Ulice:</source>
      </segment>
      <segment id="2-34">
        <source xml:space="preserve"> [@GET street] [/@PROCEDURE] <ph id="ph6"/> [@GET exp="PrintAddress(state:'CZ', city:'Praha', street:'Národní')"] | [@GET exp="PrintAddress(street:'Madison Ave', city:'New York', state:'US')"] - vypíše na stránku text:</source>
      </segment>
      <segment id="2-35">
        <source xml:space="preserve"> Stát:</source>
      </segment>
      <segment id="2-36">
        <source xml:space="preserve"> CZ, Město:</source>
      </segment>
      <segment id="2-37">
        <source xml:space="preserve"> Praha, Ulice:</source>
      </segment>
      <segment id="2-38">
        <source xml:space="preserve"> Národní | Stát:</source>
      </segment>
      <segment id="2-39">
        <source xml:space="preserve"> US, Město:</source>
      </segment>
      <segment id="2-40">
        <source xml:space="preserve"> New York, Ulice:</source>
      </segment>
      <segment id="2-41">
        <source xml:space="preserve"> Madison Ave </source>
      </segment>
    </unit>
    <unit id="3">
      <segment id="3-0">
        <source xml:space="preserve"> [@PROCEDURE] ...</source>
      </segment>
      <segment id="3-1">
        <source xml:space="preserve"> [/@PROCEDURE] Má následující parametry:</source>
      </segment>
      <ignorable id="3-2">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="4">
      <segment id="4-0">
        <source xml:space="preserve">MojeProcedura</source>
      </segment>
    </unit>
    <unit id="5">
      <segment id="5-0">
        <source xml:space="preserve">[@CALL name=#MojeProcedura]</source>
      </segment>
    </unit>
    <unit id="6">
      <segment id="6-0">
        <source xml:space="preserve">[@MojeProcedura]</source>
      </segment>
    </unit>
    <unit id="7">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="7-0">
        <source xml:space="preserve"> [@PROCEDURE name=#PrintHello] Přeji dobrý den. [/@PROCEDURE] <ph id="ph0"/> [@CALL name=#PrintHello] | [@PrintHello] </source>
      </segment>
    </unit>
    <unit id="8">
      <segment id="8-0">
        <source xml:space="preserve">$useLast</source>
      </segment>
    </unit>
    <unit id="9">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="9-0">
        <source xml:space="preserve"> [@PROCEDURE name=#DoSomething] Something...</source>
      </segment>
      <segment id="9-1">
        <source xml:space="preserve"> [/@PROCEDURE] <ph id="ph0"/> [@PROCEDURE name=#DoSomething] Do something else...</source>
      </segment>
      <segment id="9-2">
        <source xml:space="preserve"> [/@PROCEDURE] </source>
      </segment>
    </unit>
    <unit id="10">
      <segment id="10-0">
        <source xml:space="preserve">$useLast</source>
      </segment>
    </unit>
    <unit id="11">
      <segment id="11-0">
        <source xml:space="preserve"> [@PROCEDURE name=#DoSomething] Something...</source>
      </segment>
      <segment id="11-1">
        <source xml:space="preserve"> [/@PROCEDURE] [@PROCEDURE name=#DoSomething, $useLast] Do something else...</source>
      </segment>
      <segment id="11-2">
        <source xml:space="preserve"> [/@PROCEDURE] [@DoSomething] </source>
      </segment>
    </unit>
    <unit id="12">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="12-0">
        <source xml:space="preserve"> [@BLOCK] [@PROCEDURE name=#SayHello] Ahoj [/@PROCEDURE] [/@BLOCK] <ph id="ph0"/> [@SayHello] </source>
      </segment>
    </unit>
    <unit id="13">
      <segment id="13-0">
        <source xml:space="preserve">$global</source>
      </segment>
    </unit>
    <unit id="14">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="14-0">
        <source xml:space="preserve"> [@BLOCK] [@PROCEDURE name=#SayHello, $global] Ahoj [/@PROCEDURE] [/@BLOCK] <ph id="ph0"/> [@SayHello] </source>
      </segment>
    </unit>
    <unit id="15">
      <segment id="15-0">
        <source xml:space="preserve">ret</source>
      </segment>
    </unit>
    <unit id="16">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="16-0">
        <source xml:space="preserve"> [@PROCEDURE name=#GetSampleText, $returnText] Lorem ipsum dolor sit amet [/@PROCEDURE] <ph id="ph0"/> [@GET exp=GetSampleText()] </source>
      </segment>
    </unit>
    <unit id="17">
      <segment id="17-0">
        <source xml:space="preserve">$inner</source>
      </segment>
    </unit>
    <unit id="18">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
        <data id="ph1">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="18-0">
        <source xml:space="preserve"> [@PROCEDURE name=#DoSomething, $inner] Something...</source>
      </segment>
      <segment id="18-1">
        <source xml:space="preserve"> [@GET $inner] or [@INNER] Somthing else...</source>
      </segment>
      <segment id="18-2">
        <source xml:space="preserve"> [/@PROCEDURE] <ph id="ph0"/> [@CALL name=#DoSomething] Inner text...</source>
      </segment>
      <segment id="18-3">
        <source xml:space="preserve"> [/@CALL] <ph id="ph1"/> [@DoSomething] Inner text...</source>
      </segment>
      <segment id="18-4">
        <source xml:space="preserve"> [/@DoSomething] </source>
      </segment>
    </unit>
    <unit id="19">
      <segment id="19-0">
        <source xml:space="preserve">$transparent</source>
      </segment>
    </unit>
  </file>
</xliff>