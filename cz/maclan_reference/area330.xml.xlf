<?xml version="1.0" encoding="UTF-8" ?>
<xliff srcLang="cs-CZ" xmlns:mtc="urn:oasis:names:tc:xliff:matches:2.0" version="2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" trgLang="en-US" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file original="C:\from_backup\multipage_books\cz\maclan_reference\transformation\maclan\area330.xml" id="1">
    <skeleton href="C:\from_backup\multipage_books\cz\maclan_reference\transformation\maclan\area330.xml.skl"/>
    <mda:metadata>
      <mda:metaGroup category="format">
        <mda:meta type="datatype">xml</mda:meta>
      </mda:metaGroup>
      <mda:metaGroup category="tool">
        <mda:meta type="tool-id">OpenXLIFF</mda:meta>
        <mda:meta type="tool-name">OpenXLIFF Filters</mda:meta>
        <mda:meta type="tool-version">3.0.0 20230109_0743</mda:meta>
      </mda:metaGroup>
      <mda:metaGroup category="PI">
        <mda:meta type="encoding">UTF-8</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <unit id="1">
      <segment id="1-0">
        <source xml:space="preserve"> [@CALL] nebo [@MojeProcedura] </source>
      </segment>
    </unit>
    <unit id="2">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
        <data id="ph1">&amp;amp;nbsp;</data>
        <data id="ph2">&amp;amp;nbsp;</data>
        <data id="ph3">&amp;amp;nbsp;</data>
        <data id="ph4">&amp;amp;nbsp;</data>
        <data id="ph5">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="2-0">
        <source xml:space="preserve"> Značky [@CALL name=#MojeProcedura] nebo zkráceně [@MojeProcedura] provedou proceduru pojmenovanou názvem MojeProcedura, která byla v předchozím textu uložena do paměti pomocí příkazu [@PROCEDURE name=#MojeProcedura].</source>
      </segment>
      <segment id="2-1">
        <source xml:space="preserve"> Výsledný text, který může záviset na parametrech volání potom uvedené značky vkládají do textu stránky.</source>
      </segment>
      <segment id="2-2">
        <source xml:space="preserve"> Například následující program:</source>
      </segment>
      <segment id="2-3">
        <source xml:space="preserve"> [@PROCEDURE name=#Hello, firstName] Dobrý den [@GET firstName]!</source>
      </segment>
      <segment id="2-4">
        <source xml:space="preserve"> [/@PROCEDURE] <ph id="ph0"/> [@CALL name=#Hello, firstName=#Margaret] [@Hello firstName=#Robert] - vypíše na stránku text:</source>
      </segment>
      <segment id="2-5">
        <source xml:space="preserve"> Dobrý den Margaret!</source>
      </segment>
      <segment id="2-6">
        <source xml:space="preserve"> Dobrý den Robert!</source>
      </segment>
      <segment id="2-7">
        <source xml:space="preserve"> Před voláním procedury musí být její definice uvedena v aktuálním bloku nebo jeho nadblocích nebo musí být vytvořena jako globální.</source>
      </segment>
      <segment id="2-8">
        <source xml:space="preserve"> Například následující program je chybný:</source>
      </segment>
      <segment id="2-9">
        <source xml:space="preserve"> [@BLOCK] [@PROCEDURE name=#DoSomething] Something to do... [/@PROCEDURE] [/@BLOCK] <ph id="ph1"/> [@DoSomething] - předchozí program vypíše na stránku chybové hlášení:</source>
      </segment>
      <segment id="2-10">
        <source xml:space="preserve"> #ERROR:Procedure "DoSomething" doesn't exist.# kdežto následující program použije v definici procedury parametr $global.</source>
      </segment>
      <segment id="2-11">
        <source xml:space="preserve"> Tím určí, že tato procedura bude uložena jako globální, tj. do globálního bloku celé stránky.</source>
      </segment>
      <segment id="2-12">
        <source xml:space="preserve"> Například:</source>
      </segment>
      <segment id="2-13">
        <source xml:space="preserve"> [@BLOCK] [@PROCEDURE name=#DoSomethingElse, $global] Something else to do... [/@PROCEDURE] [/@BLOCK] <ph id="ph2"/> [@DoSomethingElse] - předchozí program vypíše na stránku text:</source>
      </segment>
      <segment id="2-14">
        <source xml:space="preserve"> Something else to do...</source>
      </segment>
      <segment id="2-15">
        <source xml:space="preserve"> Pokud se v příkazu [@CALL ...] nebo [@MojeProcedura] neuvedou některé ze vstupních parametrů, pak jsou jim při zpracování přiřazeny hodnoty null.</source>
      </segment>
      <segment id="2-16">
        <source xml:space="preserve"> Například v následujícím programu je při volání procedury zapomenutý parametr text2:</source>
      </segment>
      <segment id="2-17">
        <source xml:space="preserve"> [@PROCEDURE name=#PrintShopping, text1, text2] V košíku je [@GET text1] a [@GET text2] [/@PROCEDURE] <ph id="ph3"/> [@PrintShopping text1=#jablko] - předchozí příklad vypíše na stránku text:</source>
      </segment>
      <segment id="2-18">
        <source xml:space="preserve"> V košíku je jablko a null Pokud značka [@PROCEDURE] uvede v definici výstupní parametr označený jako out nebo txt, pak musí příkaz [@CALL] nebo [@MojeProcedura] uvést u tohoto parametru název výstupní proměnné, jinak skončí tento příkaz s chybou.</source>
      </segment>
      <segment id="2-19">
        <source xml:space="preserve"> Například následující program:</source>
      </segment>
      <segment id="2-20">
        <source xml:space="preserve"> [@PROCEDURE name=#GetAddress, address=out] [@SET address="#Václavské náměstí, Praha"] [/@PROCEDURE] <ph id="ph4"/> [@GetAddress address=1.25] - skončí chybovým hlášením:</source>
      </segment>
      <segment id="2-21">
        <source xml:space="preserve"> #ERROR:Cannot create parameter "address".</source>
      </segment>
      <segment id="2-22">
        <source xml:space="preserve"> Referenced variable "1.25" doesn't exist.# Naproti tomu následující program definuje proměnnou myAddress a uvádí jí v parametru volání:</source>
      </segment>
      <segment id="2-23">
        <source xml:space="preserve"> [@PROCEDURE name=#GetAddress, address=out] [@SET address="#Piccadilly Circus, London"] [/@PROCEDURE] <ph id="ph5"/> [@VAR myAddress] [@GetAddress address=myAddress] [@GET myAdress] - vypíše na stránku text:</source>
      </segment>
      <segment id="2-24">
        <source xml:space="preserve"> Piccadilly Circus, London Ve volání [@CALL] nebo [@MojeProcedura] je také možné uvést oblast.</source>
      </segment>
      <segment id="2-25">
        <source xml:space="preserve"> Odpovídající parametr musí mít na začátku znak $ (tj. $areaId, $areaAlias, $area, $startArea, $homeArea, $requestedArea nebo $thisArea).</source>
      </segment>
      <segment id="2-26">
        <source xml:space="preserve"> Je-li ve značce nastavená oblast, nemusí být definice procedury uložená předchozím programem do paměti.</source>
      </segment>
      <segment id="2-27">
        <source xml:space="preserve"> Vytvoří se dočasný programový blok, do něj se vloží obsah slotu s definicí procedury (např. MojeProcedura) a provede se volání [@MojeProcedura ...].</source>
      </segment>
      <segment id="2-28">
        <source xml:space="preserve"> Pokud není oblast uvedena vůbec a není také uveden ani název slotu, hledá se definice procedury ve slotu s názvem MojeProcedura jenž se nachází v oblasti thisArea.</source>
      </segment>
      <segment id="2-29">
        <source xml:space="preserve"> Nasledující dva příklady volání jsou ekvivalentní:</source>
      </segment>
      <segment id="2-30">
        <source xml:space="preserve"> A) [@MojeProcedura $area=myArea, firstName=#Mary] B) [@BLOCK] [@TAG area=myArea, slot=#MojeProcedura] [@MojeProcedura firstName=#Mary] [/@BLOCK] Jak bylo uvedeno v předchozí tučné poznámce, v případě kdy není procedura uložena v paměti, provede se následující přepis volání (následující volání jsou opět ekvivalentní):</source>
      </segment>
      <segment id="2-31">
        <source xml:space="preserve"> A) [@MojeProcedura firstName=#Mary] B) [@BLOCK] [@TAG thisArea, slot=#MojeProcedura] [@MojeProcedura firstName=#Mary] [/@BLOCK] - není-li v předchozím příkladu ve slotu MojeProcedura v oblasti myArea uložena definice procedury, ukončí se program s chybou:</source>
      </segment>
      <segment id="2-32">
        <source xml:space="preserve"> #ERROR:Procedure "MojeProcedura" doesn't exist.# </source>
      </segment>
    </unit>
    <unit id="3">
      <segment id="3-0">
        <source xml:space="preserve"> [@CALL] nebo [@MojeProcedura] Má následující parametry:</source>
      </segment>
      <ignorable id="3-1">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="4">
      <segment id="4-0">
        <source xml:space="preserve"> name nebo $name:</source>
      </segment>
      <ignorable id="4-1">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="5">
      <segment id="5-0">
        <source xml:space="preserve"> Parametr určuje název volané procedury ve volání [@CALL].</source>
      </segment>
      <segment id="5-1">
        <source xml:space="preserve"> Následující příklad volá proceduru s názvem WriteText:</source>
      </segment>
      <ignorable id="5-2">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="6">
      <segment id="6-0">
        <source xml:space="preserve"> [@CALL name=#WriteText, ...] </source>
      </segment>
    </unit>
    <unit id="7">
      <segment id="7-0">
        <source xml:space="preserve"> Pokud procedura používá parametr name, lze při volání použít pro název procedury parametr $name:</source>
      </segment>
      <ignorable id="7-1">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="8">
      <segment id="8-0">
        <source xml:space="preserve"> [@CALL $name=#WriteText, name=hodnota] </source>
      </segment>
    </unit>
    <unit id="9">
      <segment id="9-0">
        <source xml:space="preserve"> Hodnota parametru name nebo $name nemusí být pouze neměnný text, ale může ji určovat výraz s proměnnou hodnotou.</source>
      </segment>
      <segment id="9-1">
        <source xml:space="preserve"> Například následující program:</source>
      </segment>
      <ignorable id="9-2">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="10">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
        <data id="ph1">&amp;amp;nbsp;</data>
        <data id="ph2">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="10-0">
        <source xml:space="preserve"> [@PROCEDURE name=#PrintHello1] Good morning [/@PROCEDURE] <ph id="ph0"/> [@PROCEDURE name=#PrintHello2] Hello [/@PROCEDURE] <ph id="ph1"/> [@PROCEDURE name=#PrintHello3] Hi [/@PROCEDURE] <ph id="ph2"/> [@LOOP from=1, to=3, index=myIndex, divider=#-] [@CALL name="'PrintHello' + myIndex as Text"] [/@LOOP] </source>
      </segment>
    </unit>
    <unit id="11">
      <segment id="11-0">
        <source xml:space="preserve"> - vypíše na stránku text:</source>
      </segment>
      <segment id="11-1">
        <source xml:space="preserve"> Good morning - Hello - Hi </source>
      </segment>
    </unit>
    <unit id="12">
      <segment id="12-0">
        <source xml:space="preserve"> $areaId, ..., $thisArea:</source>
      </segment>
      <ignorable id="12-1">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="13">
      <segment id="13-0">
        <source xml:space="preserve"> U volání procedury lze určit oblast tak, jak bylo zmíněno v předchozím textu.</source>
      </segment>
      <segment id="13-1">
        <source xml:space="preserve"> Použít lze jeden z následujících parametrů:</source>
      </segment>
      <segment id="13-2">
        <source xml:space="preserve"> $areaId, $areaAlias, $area, $startArea, $homeArea, $requestedArea nebo $thisArea.</source>
      </segment>
      <segment id="13-3">
        <source xml:space="preserve"> Tyto parametry odpovídají stejným parametrům uvedeným např. u značky [@AREA_NAME], ale se znakem $ před jejich názvem.</source>
      </segment>
      <segment id="13-4">
        <source xml:space="preserve"> Znak $ odlišuje určení oblasti od běžných parametrů volané procedury.</source>
      </segment>
      <ignorable id="13-5">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="14">
      <segment id="14-0">
        <source xml:space="preserve"> $parent:</source>
      </segment>
      <ignorable id="14-1">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="15">
      <segment id="15-0">
        <source xml:space="preserve"> Tento parametr je bez hodnoty a určuje, že se bude volat procedura ze slotu zděděného z některé rodičovské oblasti určené jedním z předchozích parametrů $areaId, ..., $thisArea.</source>
      </segment>
      <segment id="15-1">
        <source xml:space="preserve"> Při vkládání definice procedury se tedy použije pouze zděděný slot.</source>
      </segment>
      <segment id="15-2">
        <source xml:space="preserve"> Dva následující programy jsou ekvivalentní:</source>
      </segment>
      <ignorable id="15-3">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="16">
      <segment id="16-0">
        <source xml:space="preserve"> A) [@MojeProcedura $areaAlias=#moje_oblast, $parent] B) [@BLOCK] [@TAG areaAlias=#moje_oblast, slot=#MojeProcedura, $parent] [@MojeProcedura] [/@BLOCK] </source>
      </segment>
    </unit>
    <unit id="17">
      <segment id="17-0">
        <source xml:space="preserve"> - v předchozím příkladu se hledá definice procedury MojeProcedura ve slotech, které lze zdědit z rodičovských oblastí oblasti se zkratkou moje_oblast.</source>
      </segment>
      <ignorable id="17-1">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="18">
      <segment id="18-0">
        <source xml:space="preserve"> $inner:</source>
      </segment>
      <ignorable id="18-1">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="19">
      <segment id="19-0">
        <source xml:space="preserve"> Je-li uveden parametr $inner, pak při volání této procedury se musí použít složená značka s vnitřním textem a příkazy.</source>
      </segment>
      <segment id="19-1">
        <source xml:space="preserve"> Vnitřní text a příkazy jsou uloženy jako hodnota do parametru $inner.</source>
      </segment>
      <segment id="19-2">
        <source xml:space="preserve"> Pro vypsání hodnoty $inner je možné použít také značku [@INNER].</source>
      </segment>
      <segment id="19-3">
        <source xml:space="preserve"> Napíklad:</source>
      </segment>
      <ignorable id="19-4">
        <source xml:space="preserve"> </source>
      </ignorable>
    </unit>
    <unit id="20">
      <originalData>
        <data id="ph0">&amp;amp;nbsp;</data>
        <data id="ph1">&amp;amp;nbsp;</data>
      </originalData>
      <segment id="20-0">
        <source xml:space="preserve"> [@PROCEDURE name=#DoSomething, $inner] Something...</source>
      </segment>
      <segment id="20-1">
        <source xml:space="preserve"> [@GET $inner] or [@INNER] Somthing else...</source>
      </segment>
      <segment id="20-2">
        <source xml:space="preserve"> [/@PROCEDURE] <ph id="ph0"/> [@CALL name=#DoSomething] Inner text...</source>
      </segment>
      <segment id="20-3">
        <source xml:space="preserve"> [/@CALL] <ph id="ph1"/> [@DoSomething] Inner text...</source>
      </segment>
      <segment id="20-4">
        <source xml:space="preserve"> [/@DoSomething] </source>
      </segment>
    </unit>
  </file>
</xliff>